package com.xiaoqing.flight.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.xiaoqing.flight.data.dao.AllAircraft;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ALL_AIRCRAFT.
*/
public class AllAircraftDao extends AbstractDao<AllAircraft, Long> {

    public static final String TABLENAME = "ALL_AIRCRAFT";

    /**
     * Properties of entity AllAircraft.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AircraftReg = new Property(1, String.class, "AircraftReg", false, "AIRCRAFT_REG");
        public final static Property UserCode = new Property(2, String.class, "UserCode", false, "USER_CODE");
        public final static Property AircraftType = new Property(3, String.class, "AircraftType", false, "AIRCRAFT_TYPE");
        public final static Property Bw = new Property(4, Integer.class, "Bw", false, "BW");
        public final static Property Lj = new Property(5, Double.class, "Lj", false, "LJ");
        public final static Property LayoutPic = new Property(6, String.class, "LayoutPic", false, "LAYOUT_PIC");
        public final static Property OpDate = new Property(7, String.class, "OpDate", false, "OP_DATE");
        public final static Property SysVersion = new Property(8, Integer.class, "SysVersion", false, "SYS_VERSION");
        public final static Property AcRemark = new Property(9, String.class, "AcRemark", false, "AC_REMARK");
    };


    public AllAircraftDao(DaoConfig config) {
        super(config);
    }
    
    public AllAircraftDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ALL_AIRCRAFT' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'AIRCRAFT_REG' TEXT," + // 1: AircraftReg
                "'USER_CODE' TEXT," + // 2: UserCode
                "'AIRCRAFT_TYPE' TEXT," + // 3: AircraftType
                "'BW' INTEGER," + // 4: Bw
                "'LJ' REAL," + // 5: Lj
                "'LAYOUT_PIC' TEXT," + // 6: LayoutPic
                "'OP_DATE' TEXT," + // 7: OpDate
                "'SYS_VERSION' INTEGER," + // 8: SysVersion
                "'AC_REMARK' TEXT);"); // 9: AcRemark
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ALL_AIRCRAFT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AllAircraft entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String AircraftReg = entity.getAircraftReg();
        if (AircraftReg != null) {
            stmt.bindString(2, AircraftReg);
        }
 
        String UserCode = entity.getUserCode();
        if (UserCode != null) {
            stmt.bindString(3, UserCode);
        }
 
        String AircraftType = entity.getAircraftType();
        if (AircraftType != null) {
            stmt.bindString(4, AircraftType);
        }
 
        Integer Bw = entity.getBw();
        if (Bw != null) {
            stmt.bindLong(5, Bw);
        }
 
        Double Lj = entity.getLj();
        if (Lj != null) {
            stmt.bindDouble(6, Lj);
        }
 
        String LayoutPic = entity.getLayoutPic();
        if (LayoutPic != null) {
            stmt.bindString(7, LayoutPic);
        }
 
        String OpDate = entity.getOpDate();
        if (OpDate != null) {
            stmt.bindString(8, OpDate);
        }
 
        Integer SysVersion = entity.getSysVersion();
        if (SysVersion != null) {
            stmt.bindLong(9, SysVersion);
        }
 
        String AcRemark = entity.getAcRemark();
        if (AcRemark != null) {
            stmt.bindString(10, AcRemark);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AllAircraft readEntity(Cursor cursor, int offset) {
        AllAircraft entity = new AllAircraft( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // AircraftReg
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // UserCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // AircraftType
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // Bw
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // Lj
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // LayoutPic
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // OpDate
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // SysVersion
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // AcRemark
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AllAircraft entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAircraftReg(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAircraftType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBw(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setLj(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setLayoutPic(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setOpDate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSysVersion(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setAcRemark(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AllAircraft entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AllAircraft entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
