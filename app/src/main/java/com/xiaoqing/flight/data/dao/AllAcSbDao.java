package com.xiaoqing.flight.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.xiaoqing.flight.data.dao.AllAcSb;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ALL_AC_SB.
*/
public class AllAcSbDao extends AbstractDao<AllAcSb, Long> {

    public static final String TABLENAME = "ALL_AC_SB";

    /**
     * Properties of entity AllAcSb.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AcReg = new Property(1, String.class, "AcReg", false, "AC_REG");
        public final static Property SbId = new Property(2, Integer.class, "SbId", false, "SB_ID");
        public final static Property SbWeight = new Property(3, Float.class, "SbWeight", false, "SB_WEIGHT");
        public final static Property SbLb = new Property(4, Float.class, "SbLb", false, "SB_LB");
        public final static Property OpUser = new Property(5, String.class, "OpUser", false, "OP_USER");
        public final static Property OpDate = new Property(6, String.class, "OpDate", false, "OP_DATE");
        public final static Property Sysversion = new Property(7, Integer.class, "Sysversion", false, "SYSVERSION");
    };


    public AllAcSbDao(DaoConfig config) {
        super(config);
    }
    
    public AllAcSbDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ALL_AC_SB' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'AC_REG' TEXT," + // 1: AcReg
                "'SB_ID' INTEGER," + // 2: SbId
                "'SB_WEIGHT' REAL," + // 3: SbWeight
                "'SB_LB' REAL," + // 4: SbLb
                "'OP_USER' TEXT," + // 5: OpUser
                "'OP_DATE' TEXT," + // 6: OpDate
                "'SYSVERSION' INTEGER);"); // 7: Sysversion
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ALL_AC_SB'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AllAcSb entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String AcReg = entity.getAcReg();
        if (AcReg != null) {
            stmt.bindString(2, AcReg);
        }
 
        Integer SbId = entity.getSbId();
        if (SbId != null) {
            stmt.bindLong(3, SbId);
        }
 
        Float SbWeight = entity.getSbWeight();
        if (SbWeight != null) {
            stmt.bindDouble(4, SbWeight);
        }
 
        Float SbLb = entity.getSbLb();
        if (SbLb != null) {
            stmt.bindDouble(5, SbLb);
        }
 
        String OpUser = entity.getOpUser();
        if (OpUser != null) {
            stmt.bindString(6, OpUser);
        }
 
        String OpDate = entity.getOpDate();
        if (OpDate != null) {
            stmt.bindString(7, OpDate);
        }
 
        Integer Sysversion = entity.getSysversion();
        if (Sysversion != null) {
            stmt.bindLong(8, Sysversion);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AllAcSb readEntity(Cursor cursor, int offset) {
        AllAcSb entity = new AllAcSb( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // AcReg
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // SbId
            cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3), // SbWeight
            cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4), // SbLb
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // OpUser
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // OpDate
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7) // Sysversion
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AllAcSb entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAcReg(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSbId(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setSbWeight(cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3));
        entity.setSbLb(cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4));
        entity.setOpUser(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOpDate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSysversion(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AllAcSb entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AllAcSb entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
