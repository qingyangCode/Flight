package com.xiaoqing.flight.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.xiaoqing.flight.data.dao.UploadAirPerson;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table UPLOAD_AIR_PERSON.
*/
public class UploadAirPersonDao extends AbstractDao<UploadAirPerson, Long> {

    public static final String TABLENAME = "UPLOAD_AIR_PERSON";

    /**
     * Properties of entity UploadAirPerson.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AircraftReg = new Property(1, String.class, "AircraftReg", false, "AIRCRAFT_REG");
        public final static Property FlightId = new Property(2, String.class, "FlightId", false, "FLIGHT_ID");
        public final static Property SeatId = new Property(3, Integer.class, "SeatId", false, "SEAT_ID");
        public final static Property SeatCode = new Property(4, String.class, "SeatCode", false, "SEAT_CODE");
        public final static Property SeatType = new Property(5, String.class, "SeatType", false, "SEAT_TYPE");
        public final static Property AcTypeSeatLimit = new Property(6, Float.class, "AcTypeSeatLimit", false, "AC_TYPE_SEAT_LIMIT");
        public final static Property AcTypeLb = new Property(7, Float.class, "AcTypeLb", false, "AC_TYPE_LB");
        public final static Property AcRegCargWeight = new Property(8, Float.class, "AcRegCargWeight", false, "AC_REG_CARG_WEIGHT");
        public final static Property AcRegCagLj = new Property(9, Float.class, "AcRegCagLj", false, "AC_REG_CAG_LJ");
        public final static Property SeatLastLimit = new Property(10, Float.class, "SeatLastLimit", false, "SEAT_LAST_LIMIT");
        public final static Property PassagerName = new Property(11, String.class, "PassagerName", false, "PASSAGER_NAME");
        public final static Property RealWeight = new Property(12, Float.class, "RealWeight", false, "REAL_WEIGHT");
        public final static Property OpUser = new Property(13, String.class, "OpUser", false, "OP_USER");
        public final static Property OpDate = new Property(14, String.class, "OpDate", false, "OP_DATE");
    };


    public UploadAirPersonDao(DaoConfig config) {
        super(config);
    }
    
    public UploadAirPersonDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'UPLOAD_AIR_PERSON' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'AIRCRAFT_REG' TEXT," + // 1: AircraftReg
                "'FLIGHT_ID' TEXT," + // 2: FlightId
                "'SEAT_ID' INTEGER," + // 3: SeatId
                "'SEAT_CODE' TEXT," + // 4: SeatCode
                "'SEAT_TYPE' TEXT," + // 5: SeatType
                "'AC_TYPE_SEAT_LIMIT' REAL," + // 6: AcTypeSeatLimit
                "'AC_TYPE_LB' REAL," + // 7: AcTypeLb
                "'AC_REG_CARG_WEIGHT' REAL," + // 8: AcRegCargWeight
                "'AC_REG_CAG_LJ' REAL," + // 9: AcRegCagLj
                "'SEAT_LAST_LIMIT' REAL," + // 10: SeatLastLimit
                "'PASSAGER_NAME' TEXT," + // 11: PassagerName
                "'REAL_WEIGHT' REAL," + // 12: RealWeight
                "'OP_USER' TEXT," + // 13: OpUser
                "'OP_DATE' TEXT);"); // 14: OpDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'UPLOAD_AIR_PERSON'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UploadAirPerson entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String AircraftReg = entity.getAircraftReg();
        if (AircraftReg != null) {
            stmt.bindString(2, AircraftReg);
        }
 
        String FlightId = entity.getFlightId();
        if (FlightId != null) {
            stmt.bindString(3, FlightId);
        }
 
        Integer SeatId = entity.getSeatId();
        if (SeatId != null) {
            stmt.bindLong(4, SeatId);
        }
 
        String SeatCode = entity.getSeatCode();
        if (SeatCode != null) {
            stmt.bindString(5, SeatCode);
        }
 
        String SeatType = entity.getSeatType();
        if (SeatType != null) {
            stmt.bindString(6, SeatType);
        }
 
        Float AcTypeSeatLimit = entity.getAcTypeSeatLimit();
        if (AcTypeSeatLimit != null) {
            stmt.bindDouble(7, AcTypeSeatLimit);
        }
 
        Float AcTypeLb = entity.getAcTypeLb();
        if (AcTypeLb != null) {
            stmt.bindDouble(8, AcTypeLb);
        }
 
        Float AcRegCargWeight = entity.getAcRegCargWeight();
        if (AcRegCargWeight != null) {
            stmt.bindDouble(9, AcRegCargWeight);
        }
 
        Float AcRegCagLj = entity.getAcRegCagLj();
        if (AcRegCagLj != null) {
            stmt.bindDouble(10, AcRegCagLj);
        }
 
        Float SeatLastLimit = entity.getSeatLastLimit();
        if (SeatLastLimit != null) {
            stmt.bindDouble(11, SeatLastLimit);
        }
 
        String PassagerName = entity.getPassagerName();
        if (PassagerName != null) {
            stmt.bindString(12, PassagerName);
        }
 
        Float RealWeight = entity.getRealWeight();
        if (RealWeight != null) {
            stmt.bindDouble(13, RealWeight);
        }
 
        String OpUser = entity.getOpUser();
        if (OpUser != null) {
            stmt.bindString(14, OpUser);
        }
 
        String OpDate = entity.getOpDate();
        if (OpDate != null) {
            stmt.bindString(15, OpDate);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UploadAirPerson readEntity(Cursor cursor, int offset) {
        UploadAirPerson entity = new UploadAirPerson( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // AircraftReg
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // FlightId
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // SeatId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // SeatCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // SeatType
            cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6), // AcTypeSeatLimit
            cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7), // AcTypeLb
            cursor.isNull(offset + 8) ? null : cursor.getFloat(offset + 8), // AcRegCargWeight
            cursor.isNull(offset + 9) ? null : cursor.getFloat(offset + 9), // AcRegCagLj
            cursor.isNull(offset + 10) ? null : cursor.getFloat(offset + 10), // SeatLastLimit
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // PassagerName
            cursor.isNull(offset + 12) ? null : cursor.getFloat(offset + 12), // RealWeight
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // OpUser
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // OpDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UploadAirPerson entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAircraftReg(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFlightId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSeatId(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setSeatCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSeatType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAcTypeSeatLimit(cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6));
        entity.setAcTypeLb(cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7));
        entity.setAcRegCargWeight(cursor.isNull(offset + 8) ? null : cursor.getFloat(offset + 8));
        entity.setAcRegCagLj(cursor.isNull(offset + 9) ? null : cursor.getFloat(offset + 9));
        entity.setSeatLastLimit(cursor.isNull(offset + 10) ? null : cursor.getFloat(offset + 10));
        entity.setPassagerName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setRealWeight(cursor.isNull(offset + 12) ? null : cursor.getFloat(offset + 12));
        entity.setOpUser(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setOpDate(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(UploadAirPerson entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(UploadAirPerson entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
