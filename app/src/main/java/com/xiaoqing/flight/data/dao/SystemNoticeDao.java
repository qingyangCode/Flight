package com.xiaoqing.flight.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.xiaoqing.flight.data.dao.SystemNotice;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SystemNotice.
*/
public class SystemNoticeDao extends AbstractDao<SystemNotice, Long> {

    public static final String TABLENAME = "SystemNotice";

    /**
     * Properties of entity SystemNotice.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property LMsgId = new Property(1, String.class, "LMsgId", false, "LMSG_ID");
        public final static Property StrMessageContent = new Property(2, String.class, "StrMessageContent", false, "STR_MESSAGE_CONTENT");
        public final static Property StrSendUser = new Property(3, String.class, "StrSendUser", false, "STR_SEND_USER");
        public final static Property DtSendDate = new Property(4, String.class, "DtSendDate", false, "DT_SEND_DATE");
        public final static Property MsustRead = new Property(5, String.class, "MsustRead", false, "MSUST_READ");
    };


    public SystemNoticeDao(DaoConfig config) {
        super(config);
    }
    
    public SystemNoticeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SystemNotice' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'LMSG_ID' TEXT," + // 1: LMsgId
                "'STR_MESSAGE_CONTENT' TEXT," + // 2: StrMessageContent
                "'STR_SEND_USER' TEXT," + // 3: StrSendUser
                "'DT_SEND_DATE' TEXT," + // 4: DtSendDate
                "'MSUST_READ' TEXT);"); // 5: MsustRead
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SystemNotice'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SystemNotice entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String LMsgId = entity.getLMsgId();
        if (LMsgId != null) {
            stmt.bindString(2, LMsgId);
        }
 
        String StrMessageContent = entity.getStrMessageContent();
        if (StrMessageContent != null) {
            stmt.bindString(3, StrMessageContent);
        }
 
        String StrSendUser = entity.getStrSendUser();
        if (StrSendUser != null) {
            stmt.bindString(4, StrSendUser);
        }
 
        String DtSendDate = entity.getDtSendDate();
        if (DtSendDate != null) {
            stmt.bindString(5, DtSendDate);
        }
 
        String MsustRead = entity.getMsustRead();
        if (MsustRead != null) {
            stmt.bindString(6, MsustRead);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SystemNotice readEntity(Cursor cursor, int offset) {
        SystemNotice entity = new SystemNotice( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // LMsgId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // StrMessageContent
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // StrSendUser
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // DtSendDate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // MsustRead
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SystemNotice entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLMsgId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStrMessageContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStrSendUser(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDtSendDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMsustRead(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SystemNotice entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SystemNotice entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
