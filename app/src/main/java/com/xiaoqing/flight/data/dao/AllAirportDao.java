package com.xiaoqing.flight.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.xiaoqing.flight.data.dao.AllAirport;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ALL_AIRPORT.
*/
public class AllAirportDao extends AbstractDao<AllAirport, Long> {

    public static final String TABLENAME = "ALL_AIRPORT";

    /**
     * Properties of entity AllAirport.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Str4code = new Property(1, String.class, "Str4code", false, "STR4CODE");
        public final static Property StrAirportName = new Property(2, String.class, "StrAirportName", false, "STR_AIRPORT_NAME");
        public final static Property SysVersion = new Property(3, Integer.class, "SysVersion", false, "SYS_VERSION");
    };


    public AllAirportDao(DaoConfig config) {
        super(config);
    }
    
    public AllAirportDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ALL_AIRPORT' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'STR4CODE' TEXT," + // 1: Str4code
                "'STR_AIRPORT_NAME' TEXT," + // 2: StrAirportName
                "'SYS_VERSION' INTEGER);"); // 3: SysVersion
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ALL_AIRPORT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AllAirport entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Str4code = entity.getStr4code();
        if (Str4code != null) {
            stmt.bindString(2, Str4code);
        }
 
        String StrAirportName = entity.getStrAirportName();
        if (StrAirportName != null) {
            stmt.bindString(3, StrAirportName);
        }
 
        Integer SysVersion = entity.getSysVersion();
        if (SysVersion != null) {
            stmt.bindLong(4, SysVersion);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AllAirport readEntity(Cursor cursor, int offset) {
        AllAirport entity = new AllAirport( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Str4code
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // StrAirportName
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3) // SysVersion
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AllAirport entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStr4code(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStrAirportName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSysVersion(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AllAirport entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AllAirport entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
