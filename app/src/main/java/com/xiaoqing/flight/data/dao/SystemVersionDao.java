package com.xiaoqing.flight.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.xiaoqing.flight.data.dao.SystemVersion;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SystemVersion.
*/
public class SystemVersionDao extends AbstractDao<SystemVersion, Long> {

    public static final String TABLENAME = "SystemVersion";

    /**
     * Properties of entity SystemVersion.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property VserionName = new Property(1, String.class, "VserionName", false, "VSERION_NAME");
        public final static Property Resverved = new Property(2, String.class, "resverved", false, "RESVERVED");
        public final static Property Vserion = new Property(3, int.class, "vserion", false, "VSERION");
    };


    public SystemVersionDao(DaoConfig config) {
        super(config);
    }
    
    public SystemVersionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SystemVersion' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'VSERION_NAME' TEXT," + // 1: VserionName
                "'RESVERVED' TEXT," + // 2: resverved
                "'VSERION' INTEGER NOT NULL );"); // 3: vserion
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SystemVersion'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SystemVersion entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String VserionName = entity.getVserionName();
        if (VserionName != null) {
            stmt.bindString(2, VserionName);
        }
 
        String resverved = entity.getResverved();
        if (resverved != null) {
            stmt.bindString(3, resverved);
        }
        stmt.bindLong(4, entity.getVserion());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SystemVersion readEntity(Cursor cursor, int offset) {
        SystemVersion entity = new SystemVersion( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // VserionName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // resverved
            cursor.getInt(offset + 3) // vserion
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SystemVersion entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setVserionName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setResverved(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setVserion(cursor.getInt(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SystemVersion entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SystemVersion entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
