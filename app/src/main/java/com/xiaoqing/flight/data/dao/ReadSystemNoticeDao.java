package com.xiaoqing.flight.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.xiaoqing.flight.data.dao.ReadSystemNotice;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table READ_SYSTEM_NOTICE.
*/
public class ReadSystemNoticeDao extends AbstractDao<ReadSystemNotice, Long> {

    public static final String TABLENAME = "READ_SYSTEM_NOTICE";

    /**
     * Properties of entity ReadSystemNotice.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property LMsgId = new Property(1, String.class, "LMsgId", false, "LMSG_ID");
        public final static Property IsReaded = new Property(2, Boolean.class, "isReaded", false, "IS_READED");
        public final static Property MsustRead = new Property(3, String.class, "MsustRead", false, "MSUST_READ");
        public final static Property UserCode = new Property(4, String.class, "UserCode", false, "USER_CODE");
    };


    public ReadSystemNoticeDao(DaoConfig config) {
        super(config);
    }
    
    public ReadSystemNoticeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'READ_SYSTEM_NOTICE' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'LMSG_ID' TEXT," + // 1: LMsgId
                "'IS_READED' INTEGER," + // 2: isReaded
                "'MSUST_READ' TEXT," + // 3: MsustRead
                "'USER_CODE' TEXT);"); // 4: UserCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'READ_SYSTEM_NOTICE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ReadSystemNotice entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String LMsgId = entity.getLMsgId();
        if (LMsgId != null) {
            stmt.bindString(2, LMsgId);
        }
 
        Boolean isReaded = entity.getIsReaded();
        if (isReaded != null) {
            stmt.bindLong(3, isReaded ? 1l: 0l);
        }
 
        String MsustRead = entity.getMsustRead();
        if (MsustRead != null) {
            stmt.bindString(4, MsustRead);
        }
 
        String UserCode = entity.getUserCode();
        if (UserCode != null) {
            stmt.bindString(5, UserCode);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ReadSystemNotice readEntity(Cursor cursor, int offset) {
        ReadSystemNotice entity = new ReadSystemNotice( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // LMsgId
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // isReaded
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // MsustRead
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // UserCode
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ReadSystemNotice entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLMsgId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIsReaded(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setMsustRead(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ReadSystemNotice entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ReadSystemNotice entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
