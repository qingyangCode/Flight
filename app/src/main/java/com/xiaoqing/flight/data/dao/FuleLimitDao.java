package com.xiaoqing.flight.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.xiaoqing.flight.data.dao.FuleLimit;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FULE_LIMIT.
*/
public class FuleLimitDao extends AbstractDao<FuleLimit, Long> {

    public static final String TABLENAME = "FULE_LIMIT";

    /**
     * Properties of entity FuleLimit.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AcType = new Property(1, String.class, "AcType", false, "AC_TYPE");
        public final static Property FuleWeight = new Property(2, Float.class, "FuleWeight", false, "FULE_WEIGHT");
        public final static Property FuleLj = new Property(3, Float.class, "FuleLj", false, "FULE_LJ");
        public final static Property OpUser = new Property(4, String.class, "OpUser", false, "OP_USER");
        public final static Property OpDate = new Property(5, String.class, "OpDate", false, "OP_DATE");
        public final static Property SysVersion = new Property(6, int.class, "SysVersion", false, "SYS_VERSION");
    };


    public FuleLimitDao(DaoConfig config) {
        super(config);
    }
    
    public FuleLimitDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FULE_LIMIT' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'AC_TYPE' TEXT," + // 1: AcType
                "'FULE_WEIGHT' REAL," + // 2: FuleWeight
                "'FULE_LJ' REAL," + // 3: FuleLj
                "'OP_USER' TEXT," + // 4: OpUser
                "'OP_DATE' TEXT," + // 5: OpDate
                "'SYS_VERSION' INTEGER NOT NULL );"); // 6: SysVersion
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FULE_LIMIT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FuleLimit entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String AcType = entity.getAcType();
        if (AcType != null) {
            stmt.bindString(2, AcType);
        }
 
        Float FuleWeight = entity.getFuleWeight();
        if (FuleWeight != null) {
            stmt.bindDouble(3, FuleWeight);
        }
 
        Float FuleLj = entity.getFuleLj();
        if (FuleLj != null) {
            stmt.bindDouble(4, FuleLj);
        }
 
        String OpUser = entity.getOpUser();
        if (OpUser != null) {
            stmt.bindString(5, OpUser);
        }
 
        String OpDate = entity.getOpDate();
        if (OpDate != null) {
            stmt.bindString(6, OpDate);
        }
        stmt.bindLong(7, entity.getSysVersion());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public FuleLimit readEntity(Cursor cursor, int offset) {
        FuleLimit entity = new FuleLimit( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // AcType
            cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2), // FuleWeight
            cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3), // FuleLj
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // OpUser
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // OpDate
            cursor.getInt(offset + 6) // SysVersion
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FuleLimit entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAcType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFuleWeight(cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2));
        entity.setFuleLj(cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3));
        entity.setOpUser(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOpDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSysVersion(cursor.getInt(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(FuleLimit entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(FuleLimit entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
