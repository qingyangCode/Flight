package com.xiaoqing.flight.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.xiaoqing.flight.data.dao.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table user.
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "user";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserName = new Property(1, String.class, "UserName", false, "USER_NAME");
        public final static Property UserCode = new Property(2, String.class, "UserCode", false, "USER_CODE");
        public final static Property DepCode = new Property(3, String.class, "DepCode", false, "DEP_CODE");
        public final static Property UserPassWord = new Property(4, String.class, "UserPassWord", false, "USER_PASS_WORD");
        public final static Property CodeCheck = new Property(5, String.class, "CodeCheck", false, "CODE_CHECK");
        public final static Property Grant_S_M = new Property(6, String.class, "Grant_S_M", false, "GRANT__S__M");
        public final static Property ActiveStart = new Property(7, String.class, "ActiveStart", false, "ACTIVE_START");
        public final static Property SysVersion = new Property(8, int.class, "SysVersion", false, "SYS_VERSION");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'user' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'USER_NAME' TEXT NOT NULL UNIQUE ," + // 1: UserName
                "'USER_CODE' TEXT," + // 2: UserCode
                "'DEP_CODE' TEXT," + // 3: DepCode
                "'USER_PASS_WORD' TEXT," + // 4: UserPassWord
                "'CODE_CHECK' TEXT," + // 5: CodeCheck
                "'GRANT__S__M' TEXT," + // 6: Grant_S_M
                "'ACTIVE_START' TEXT," + // 7: ActiveStart
                "'SYS_VERSION' INTEGER NOT NULL );"); // 8: SysVersion
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'user'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUserName());
 
        String UserCode = entity.getUserCode();
        if (UserCode != null) {
            stmt.bindString(3, UserCode);
        }
 
        String DepCode = entity.getDepCode();
        if (DepCode != null) {
            stmt.bindString(4, DepCode);
        }
 
        String UserPassWord = entity.getUserPassWord();
        if (UserPassWord != null) {
            stmt.bindString(5, UserPassWord);
        }
 
        String CodeCheck = entity.getCodeCheck();
        if (CodeCheck != null) {
            stmt.bindString(6, CodeCheck);
        }
 
        String Grant_S_M = entity.getGrant_S_M();
        if (Grant_S_M != null) {
            stmt.bindString(7, Grant_S_M);
        }
 
        String ActiveStart = entity.getActiveStart();
        if (ActiveStart != null) {
            stmt.bindString(8, ActiveStart);
        }
        stmt.bindLong(9, entity.getSysVersion());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // UserName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // UserCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // DepCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // UserPassWord
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // CodeCheck
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Grant_S_M
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // ActiveStart
            cursor.getInt(offset + 8) // SysVersion
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserName(cursor.getString(offset + 1));
        entity.setUserCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDepCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserPassWord(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCodeCheck(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGrant_S_M(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setActiveStart(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSysVersion(cursor.getInt(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
