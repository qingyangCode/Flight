package com.xiaoqing.flight.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.xiaoqing.flight.data.dao.AllSb;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ALL_SB.
*/
public class AllSbDao extends AbstractDao<AllSb, Long> {

    public static final String TABLENAME = "ALL_SB";

    /**
     * Properties of entity AllSb.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SbId = new Property(1, Integer.class, "SbId", false, "SB_ID");
        public final static Property SbName = new Property(2, String.class, "SbName", false, "SB_NAME");
        public final static Property SbWeight = new Property(3, Float.class, "SbWeight", false, "SB_WEIGHT");
        public final static Property AcType = new Property(4, String.class, "AcType", false, "AC_TYPE");
        public final static Property SeatId = new Property(5, Integer.class, "SeatId", false, "SEAT_ID");
        public final static Property SysVersion = new Property(6, int.class, "SysVersion", false, "SYS_VERSION");
    };


    public AllSbDao(DaoConfig config) {
        super(config);
    }
    
    public AllSbDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ALL_SB' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'SB_ID' INTEGER," + // 1: SbId
                "'SB_NAME' TEXT," + // 2: SbName
                "'SB_WEIGHT' REAL," + // 3: SbWeight
                "'AC_TYPE' TEXT," + // 4: AcType
                "'SEAT_ID' INTEGER," + // 5: SeatId
                "'SYS_VERSION' INTEGER NOT NULL );"); // 6: SysVersion
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ALL_SB'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AllSb entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer SbId = entity.getSbId();
        if (SbId != null) {
            stmt.bindLong(2, SbId);
        }
 
        String SbName = entity.getSbName();
        if (SbName != null) {
            stmt.bindString(3, SbName);
        }
 
        Float SbWeight = entity.getSbWeight();
        if (SbWeight != null) {
            stmt.bindDouble(4, SbWeight);
        }
 
        String AcType = entity.getAcType();
        if (AcType != null) {
            stmt.bindString(5, AcType);
        }
 
        Integer SeatId = entity.getSeatId();
        if (SeatId != null) {
            stmt.bindLong(6, SeatId);
        }
        stmt.bindLong(7, entity.getSysVersion());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AllSb readEntity(Cursor cursor, int offset) {
        AllSb entity = new AllSb( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // SbId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // SbName
            cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3), // SbWeight
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // AcType
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // SeatId
            cursor.getInt(offset + 6) // SysVersion
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AllSb entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSbId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setSbName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSbWeight(cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3));
        entity.setAcType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSeatId(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setSysVersion(cursor.getInt(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AllSb entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AllSb entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
