package com.uandme.flight.data.dao;

import android.database.sqlite.SQLiteDatabase;

import java.util.Map;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.AbstractDaoSession;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import de.greenrobot.dao.internal.DaoConfig;

import com.uandme.flight.data.dao.User;
import com.uandme.flight.data.dao.SystemVersion;
import com.uandme.flight.data.dao.AllAcType;
import com.uandme.flight.data.dao.AcWeightLimit;
import com.uandme.flight.data.dao.FuleLimit;
import com.uandme.flight.data.dao.AllAircraft;
import com.uandme.flight.data.dao.AllSb;
import com.uandme.flight.data.dao.SeatByAcReg;

import com.uandme.flight.data.dao.UserDao;
import com.uandme.flight.data.dao.SystemVersionDao;
import com.uandme.flight.data.dao.AllAcTypeDao;
import com.uandme.flight.data.dao.AcWeightLimitDao;
import com.uandme.flight.data.dao.FuleLimitDao;
import com.uandme.flight.data.dao.AllAircraftDao;
import com.uandme.flight.data.dao.AllSbDao;
import com.uandme.flight.data.dao.SeatByAcRegDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see de.greenrobot.dao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig userDaoConfig;
    private final DaoConfig systemVersionDaoConfig;
    private final DaoConfig allAcTypeDaoConfig;
    private final DaoConfig acWeightLimitDaoConfig;
    private final DaoConfig fuleLimitDaoConfig;
    private final DaoConfig allAircraftDaoConfig;
    private final DaoConfig allSbDaoConfig;
    private final DaoConfig seatByAcRegDaoConfig;

    private final UserDao userDao;
    private final SystemVersionDao systemVersionDao;
    private final AllAcTypeDao allAcTypeDao;
    private final AcWeightLimitDao acWeightLimitDao;
    private final FuleLimitDao fuleLimitDao;
    private final AllAircraftDao allAircraftDao;
    private final AllSbDao allSbDao;
    private final SeatByAcRegDao seatByAcRegDao;

    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        userDaoConfig = daoConfigMap.get(UserDao.class).clone();
        userDaoConfig.initIdentityScope(type);

        systemVersionDaoConfig = daoConfigMap.get(SystemVersionDao.class).clone();
        systemVersionDaoConfig.initIdentityScope(type);

        allAcTypeDaoConfig = daoConfigMap.get(AllAcTypeDao.class).clone();
        allAcTypeDaoConfig.initIdentityScope(type);

        acWeightLimitDaoConfig = daoConfigMap.get(AcWeightLimitDao.class).clone();
        acWeightLimitDaoConfig.initIdentityScope(type);

        fuleLimitDaoConfig = daoConfigMap.get(FuleLimitDao.class).clone();
        fuleLimitDaoConfig.initIdentityScope(type);

        allAircraftDaoConfig = daoConfigMap.get(AllAircraftDao.class).clone();
        allAircraftDaoConfig.initIdentityScope(type);

        allSbDaoConfig = daoConfigMap.get(AllSbDao.class).clone();
        allSbDaoConfig.initIdentityScope(type);

        seatByAcRegDaoConfig = daoConfigMap.get(SeatByAcRegDao.class).clone();
        seatByAcRegDaoConfig.initIdentityScope(type);

        userDao = new UserDao(userDaoConfig, this);
        systemVersionDao = new SystemVersionDao(systemVersionDaoConfig, this);
        allAcTypeDao = new AllAcTypeDao(allAcTypeDaoConfig, this);
        acWeightLimitDao = new AcWeightLimitDao(acWeightLimitDaoConfig, this);
        fuleLimitDao = new FuleLimitDao(fuleLimitDaoConfig, this);
        allAircraftDao = new AllAircraftDao(allAircraftDaoConfig, this);
        allSbDao = new AllSbDao(allSbDaoConfig, this);
        seatByAcRegDao = new SeatByAcRegDao(seatByAcRegDaoConfig, this);

        registerDao(User.class, userDao);
        registerDao(SystemVersion.class, systemVersionDao);
        registerDao(AllAcType.class, allAcTypeDao);
        registerDao(AcWeightLimit.class, acWeightLimitDao);
        registerDao(FuleLimit.class, fuleLimitDao);
        registerDao(AllAircraft.class, allAircraftDao);
        registerDao(AllSb.class, allSbDao);
        registerDao(SeatByAcReg.class, seatByAcRegDao);
    }
    
    public void clear() {
        userDaoConfig.getIdentityScope().clear();
        systemVersionDaoConfig.getIdentityScope().clear();
        allAcTypeDaoConfig.getIdentityScope().clear();
        acWeightLimitDaoConfig.getIdentityScope().clear();
        fuleLimitDaoConfig.getIdentityScope().clear();
        allAircraftDaoConfig.getIdentityScope().clear();
        allSbDaoConfig.getIdentityScope().clear();
        seatByAcRegDaoConfig.getIdentityScope().clear();
    }

    public UserDao getUserDao() {
        return userDao;
    }

    public SystemVersionDao getSystemVersionDao() {
        return systemVersionDao;
    }

    public AllAcTypeDao getAllAcTypeDao() {
        return allAcTypeDao;
    }

    public AcWeightLimitDao getAcWeightLimitDao() {
        return acWeightLimitDao;
    }

    public FuleLimitDao getFuleLimitDao() {
        return fuleLimitDao;
    }

    public AllAircraftDao getAllAircraftDao() {
        return allAircraftDao;
    }

    public AllSbDao getAllSbDao() {
        return allSbDao;
    }

    public SeatByAcRegDao getSeatByAcRegDao() {
        return seatByAcRegDao;
    }

}
