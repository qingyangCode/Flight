package com.uandme.flight.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.uandme.flight.data.dao.SeatByAcReg;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SEAT_BY_AC_REG.
*/
public class SeatByAcRegDao extends AbstractDao<SeatByAcReg, Long> {

    public static final String TABLENAME = "SEAT_BY_AC_REG";

    /**
     * Properties of entity SeatByAcReg.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AcReg = new Property(1, String.class, "AcReg", false, "AC_REG");
        public final static Property SeatId = new Property(2, Integer.class, "SeatId", false, "SEAT_ID");
        public final static Property SeatCode = new Property(3, String.class, "SeatCode", false, "SEAT_CODE");
        public final static Property SeatType = new Property(4, String.class, "SeatType", false, "SEAT_TYPE");
        public final static Property AcTypeSeatLimit = new Property(5, Float.class, "AcTypeSeatLimit", false, "AC_TYPE_SEAT_LIMIT");
        public final static Property AcTypeLb = new Property(6, Float.class, "AcTypeLb", false, "AC_TYPE_LB");
        public final static Property AcRegCargWeight = new Property(7, Float.class, "AcRegCargWeight", false, "AC_REG_CARG_WEIGHT");
        public final static Property AcRegSbWeight = new Property(8, Float.class, "AcRegSbWeight", false, "AC_REG_SB_WEIGHT");
        public final static Property SeatLastLimit = new Property(9, Float.class, "SeatLastLimit", false, "SEAT_LAST_LIMIT");
        public final static Property OpUser = new Property(10, String.class, "OpUser", false, "OP_USER");
        public final static Property OpDate = new Property(11, String.class, "OpDate", false, "OP_DATE");
        public final static Property SysVersion = new Property(12, String.class, "SysVersion", false, "SYS_VERSION");
        public final static Property XPos = new Property(13, Float.class, "XPos", false, "XPOS");
        public final static Property YPos = new Property(14, Float.class, "YPos", false, "YPOS");
        public final static Property Direction = new Property(15, String.class, "Direction", false, "DIRECTION");
        public final static Property UserName = new Property(16, String.class, "userName", false, "USER_NAME");
        public final static Property SeatWeight = new Property(17, float.class, "seatWeight", false, "SEAT_WEIGHT");
    };


    public SeatByAcRegDao(DaoConfig config) {
        super(config);
    }
    
    public SeatByAcRegDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SEAT_BY_AC_REG' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'AC_REG' TEXT," + // 1: AcReg
                "'SEAT_ID' INTEGER," + // 2: SeatId
                "'SEAT_CODE' TEXT," + // 3: SeatCode
                "'SEAT_TYPE' TEXT," + // 4: SeatType
                "'AC_TYPE_SEAT_LIMIT' REAL," + // 5: AcTypeSeatLimit
                "'AC_TYPE_LB' REAL," + // 6: AcTypeLb
                "'AC_REG_CARG_WEIGHT' REAL," + // 7: AcRegCargWeight
                "'AC_REG_SB_WEIGHT' REAL," + // 8: AcRegSbWeight
                "'SEAT_LAST_LIMIT' REAL," + // 9: SeatLastLimit
                "'OP_USER' TEXT," + // 10: OpUser
                "'OP_DATE' TEXT," + // 11: OpDate
                "'SYS_VERSION' TEXT," + // 12: SysVersion
                "'XPOS' REAL," + // 13: XPos
                "'YPOS' REAL," + // 14: YPos
                "'DIRECTION' TEXT," + // 15: Direction
                "'USER_NAME' TEXT," + // 16: userName
                "'SEAT_WEIGHT' REAL NOT NULL );"); // 17: seatWeight
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SEAT_BY_AC_REG'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SeatByAcReg entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String AcReg = entity.getAcReg();
        if (AcReg != null) {
            stmt.bindString(2, AcReg);
        }
 
        Integer SeatId = entity.getSeatId();
        if (SeatId != null) {
            stmt.bindLong(3, SeatId);
        }
 
        String SeatCode = entity.getSeatCode();
        if (SeatCode != null) {
            stmt.bindString(4, SeatCode);
        }
 
        String SeatType = entity.getSeatType();
        if (SeatType != null) {
            stmt.bindString(5, SeatType);
        }
 
        Float AcTypeSeatLimit = entity.getAcTypeSeatLimit();
        if (AcTypeSeatLimit != null) {
            stmt.bindDouble(6, AcTypeSeatLimit);
        }
 
        Float AcTypeLb = entity.getAcTypeLb();
        if (AcTypeLb != null) {
            stmt.bindDouble(7, AcTypeLb);
        }
 
        Float AcRegCargWeight = entity.getAcRegCargWeight();
        if (AcRegCargWeight != null) {
            stmt.bindDouble(8, AcRegCargWeight);
        }
 
        Float AcRegSbWeight = entity.getAcRegSbWeight();
        if (AcRegSbWeight != null) {
            stmt.bindDouble(9, AcRegSbWeight);
        }
 
        Float SeatLastLimit = entity.getSeatLastLimit();
        if (SeatLastLimit != null) {
            stmt.bindDouble(10, SeatLastLimit);
        }
 
        String OpUser = entity.getOpUser();
        if (OpUser != null) {
            stmt.bindString(11, OpUser);
        }
 
        String OpDate = entity.getOpDate();
        if (OpDate != null) {
            stmt.bindString(12, OpDate);
        }
 
        String SysVersion = entity.getSysVersion();
        if (SysVersion != null) {
            stmt.bindString(13, SysVersion);
        }
 
        Float XPos = entity.getXPos();
        if (XPos != null) {
            stmt.bindDouble(14, XPos);
        }
 
        Float YPos = entity.getYPos();
        if (YPos != null) {
            stmt.bindDouble(15, YPos);
        }
 
        String Direction = entity.getDirection();
        if (Direction != null) {
            stmt.bindString(16, Direction);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(17, userName);
        }
        stmt.bindDouble(18, entity.getSeatWeight());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SeatByAcReg readEntity(Cursor cursor, int offset) {
        SeatByAcReg entity = new SeatByAcReg( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // AcReg
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // SeatId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // SeatCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // SeatType
            cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5), // AcTypeSeatLimit
            cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6), // AcTypeLb
            cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7), // AcRegCargWeight
            cursor.isNull(offset + 8) ? null : cursor.getFloat(offset + 8), // AcRegSbWeight
            cursor.isNull(offset + 9) ? null : cursor.getFloat(offset + 9), // SeatLastLimit
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // OpUser
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // OpDate
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // SysVersion
            cursor.isNull(offset + 13) ? null : cursor.getFloat(offset + 13), // XPos
            cursor.isNull(offset + 14) ? null : cursor.getFloat(offset + 14), // YPos
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // Direction
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // userName
            cursor.getFloat(offset + 17) // seatWeight
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SeatByAcReg entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAcReg(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSeatId(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setSeatCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSeatType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAcTypeSeatLimit(cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5));
        entity.setAcTypeLb(cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6));
        entity.setAcRegCargWeight(cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7));
        entity.setAcRegSbWeight(cursor.isNull(offset + 8) ? null : cursor.getFloat(offset + 8));
        entity.setSeatLastLimit(cursor.isNull(offset + 9) ? null : cursor.getFloat(offset + 9));
        entity.setOpUser(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setOpDate(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSysVersion(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setXPos(cursor.isNull(offset + 13) ? null : cursor.getFloat(offset + 13));
        entity.setYPos(cursor.isNull(offset + 14) ? null : cursor.getFloat(offset + 14));
        entity.setDirection(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setUserName(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setSeatWeight(cursor.getFloat(offset + 17));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SeatByAcReg entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SeatByAcReg entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
